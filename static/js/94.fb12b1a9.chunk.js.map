{"version":3,"file":"static/js/94.fb12b1a9.chunk.js","mappings":"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","sources":["authValidation.ts","components/pages/SignIn.tsx","hooks/useFormSaving.ts","styles/authStyles.ts"],"sourcesContent":["//* validate email\nexport const validateEmail = (value: string): null | string => {\n  const validRegex: RegExp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  if (validRegex.test(value)) return null;\n  else return 'Invalid email';\n};\n\n//* validate password\nexport const validatePassword = (value: string): null | string => {\n  //* minimum 8 eight characters: digit, symbol, uppercase, lowercase\n  const validRegex: RegExp =\n    /(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})/;\n\n  if (validRegex.test(value)) return null;\n  else\n    return 'Password must include minimum 8 characters: digit, symbol, uppercase, lowercase';\n};\n\n//* validate is empty\nexport const validateIsEmpty = (value: string): null | string => {\n  if (value.length === 0) return 'Required'\n  else return null\n}\n\n//* validate email and is empty\nexport const validateEmailAndIsEmpty = (value: string): null | string => validateIsEmpty(value) || validateEmail(value)\n","import {\n  BackgroundImage,\n  Card,\n  Stack,\n  TextInput,\n  PasswordInput,\n  Center,\n  Button,\n  Text,\n} from '@mantine/core';\nimport { useForm } from '@mantine/form';\nimport { useMediaQuery } from '@mantine/hooks';\nimport { useFormSaving } from 'hooks/useFormSaving';\nimport React, { FormEventHandler } from 'react';\nimport { useStyles } from '../../styles/authStyles';\nimport { ISignUpFormValues } from './SignUp';\nimport { IconAt } from '@tabler/icons';\nimport authBgSrc from '../../images/authBg.png';\nimport { validateEmailAndIsEmpty, validateIsEmpty } from 'authValidation';\n\ntype TSignInFormValues = Omit<ISignUpFormValues, 'repeatedPassword'>;\n\nconst SignIn = (): JSX.Element => {\n  const { classes } = useStyles();\n\n  //* media query\n  const largerThan481 = useMediaQuery('(min-width: 481px)');\n\n  //* form\n  const form = useForm<TSignInFormValues>({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validate: {\n      email: validateEmailAndIsEmpty,\n      password: validateIsEmpty\n    }\n  });\n\n  //* saving inputs values\n  const resetSavedValues = useFormSaving<TSignInFormValues>(form, 'signIn');\n\n  //* submit\n  const submit: FormEventHandler<HTMLFormElement> = form.onSubmit(values => {\n    console.log(values);\n    form.reset();\n    resetSavedValues()\n  });\n\n  return (\n    <BackgroundImage className={classes.container} src={authBgSrc}>\n      <Card\n        className={classes.card}\n        px={largerThan481 ? '3%' : '4%'}\n        radius=\"md\"\n      >\n        <Text\n          className={classes.card_helper_text}\n          data-aos=\"zoom-in\"\n          data-aos-duration=\"900\"\n        >\n          Welcome back! ðŸ‘‹\n        </Text>\n        <Text\n          className={classes.card_title_text}\n          data-aos=\"zoom-in\"\n          data-aos-duration=\"1800\"\n        >\n          Sign in to your account\n        </Text>\n        <form onSubmit={submit}>\n          <Stack spacing=\"md\">\n            <TextInput\n              {...form.getInputProps('email')}\n              size=\"md\"\n              radius=\"md\"\n              label=\"Email\"\n              icon={<IconAt size={18} />}\n            />\n            <PasswordInput\n              {...form.getInputProps('password')}\n              size=\"md\"\n              radius=\"md\"\n              label=\"Password\"\n            />\n          </Stack>\n          <Button\n            type=\"submit\"\n            sx={{ marginTop: '8%' }}\n            className={classes.card_btn}\n          >\n            sign in\n          </Button>\n        </form>\n        <Center>\n          <Text className={classes.forgot_password_text}>\n            Forgot your password?\n          </Text>\n        </Center>\n        <Center>\n          <Text className={classes.account_text}>\n            Already have an account?{' '}\n            <Text c=\"#625BF7\" component=\"a\" href=\"/techgen-front/signUp\">\n              Sign up\n            </Text>\n          </Text>\n        </Center>\n      </Card>\n    </BackgroundImage>\n  );\n};\n\nexport default SignIn;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { UseFormReturnType } from '@mantine/form';\nimport { useEffect, useState } from 'react';\n\nexport const useFormSaving = <IInitialFormValues>(\n  form: UseFormReturnType<\n    IInitialFormValues,\n    (values: IInitialFormValues) => IInitialFormValues\n  >,\n  key: string\n): () => void => {\n  const [needReset, setNeedReset] = useState<boolean>(false)\n\n  //* getting values if exist\n  useEffect(() => {\n    const storedValue = sessionStorage.getItem(key);\n    if (storedValue) {\n      try {\n        form.setValues(\n          JSON.parse(sessionStorage.getItem(key) as string)\n        );\n      } catch (e) {\n        console.log('Failed to parse stored value');\n      }\n    }\n  }, []);\n\n  //* saving when value change\n  useEffect(() => {\n    sessionStorage.setItem(key, JSON.stringify(form.values));\n  }, [form.values]);\n\n  //* reset fields\n  const resetFields = (): void => setNeedReset(true)\n\n  const reset = (): void => {\n    sessionStorage.removeItem(key)\n    setNeedReset(false)\n  }\n\n  //* reset\n  useEffect(() => {\n    needReset && reset()\n  }, [needReset])\n\n  return resetFields\n};\n","import { createStyles } from '@mantine/core';\n\nexport const useStyles = createStyles({\n  container: {\n    width: '100%',\n    height: '100vh',\n  },\n\n  card: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    height: 'auto',\n    filter: 'drop-shadow(0px 4px 100px rgba(121, 126, 249, 0.19))',\n\n    '@media (min-width: 320px)': {\n      width: '92%',\n    },\n    '@media (min-width: 481px)': {\n      width: '60%',\n    },\n    '@media (min-width: 769px)': {\n      width: '30%',\n    },\n  },\n\n  card_helper_text: {\n    fontWeight: 400,\n    fontSize: '14px',\n    lineHeight: '18px',\n    color: 'rgba(241, 241, 241, 0.85)',\n\n    '@media (min-width: 320px)': {\n      marginTop: '33px',\n    },\n    '@media (min-width: 481px)': {\n      marginTop: '43px',\n    },\n  },\n\n  card_title_text: {\n    fontWeight: 500,\n    fontSize: '24px',\n    color: '#E6E6E6',\n    marginTop: '5px',\n    marginBottom: '30px',\n  },\n\n  card_btn: {\n    color: '#ffffff',\n    background: '#625BF7',\n    borderRadius: '6px',\n    height: '45px',\n    padding: '9px 14px',\n    textTransform: 'uppercase',\n    fontWeight: 700,\n    fontSize: '16px',\n    marginTop: '25px',\n    width: '100%',\n    transition: '0.4s ease-in-out',\n\n    '&:hover': { background: '#5852cc' },\n  },\n\n  privacy_policy_text: {\n    color: '#6A6A6A',\n    fontSize: '12px',\n  },\n\n  account_text: {\n    color: '#6A6A6A',\n    fontSize: '12px',\n    marginTop: '15px',\n  },\n\n  forgot_password_text: {\n    color: '#625BF7',\n    fontWeight: 700,\n    fontSize: '12px',\n    marginTop: '20px',\n  },\n});\n"],"names":["validatePassword","value","test","validateIsEmpty","length","validateEmailAndIsEmpty","validateEmail","classes","useStyles","largerThan481","useMediaQuery","form","useForm","initialValues","email","password","validate","resetSavedValues","useFormSaving","submit","onSubmit","values","console","log","reset","className","container","src","authBgSrc","card","px","radius","card_helper_text","card_title_text","spacing","getInputProps","size","label","icon","type","sx","marginTop","card_btn","forgot_password_text","account_text","c","component","href","key","useState","needReset","setNeedReset","useEffect","sessionStorage","getItem","setValues","JSON","parse","e","setItem","stringify","removeItem","createStyles","width","height","position","top","left","transform","filter","fontWeight","fontSize","lineHeight","color","marginBottom","background","borderRadius","padding","textTransform","transition","privacy_policy_text"],"sourceRoot":""}